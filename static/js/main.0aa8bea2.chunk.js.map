{"version":3,"sources":["store/constants.ts","store/reducers/index.ts","store/index.ts","pages/Home/Home.tsx","components/ColorModeSwitcher/ColorModeSwitcher.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["type","rootReducer","combineReducers","common","store","concat","createStore","composeWithDevTools","applyMiddleware","thunk","connect","React","data","setData","username","setUsername","sortBy","setSortBy","orderBy","setOrderBy","typingTimeout","setTypingTimeout","isLoading","setIsLoading","inputElem","maxW","py","spacing","size","px","as","fontSize","textColor","w","id","children","ref","value","onChange","event","target","clearTimeout","setTimeout","axios","get","params","sort","direction","then","catch","err","console","error","placeholder","closeOnSelect","Button","colorScheme","minW","title","Array","fill","map","_","key","borderWidth","borderRadius","p","alignItems","height","width","mt","ml","length","owner","name","full_name","description","svn_url","src","avatar_url","fontWeight","lineHeight","color","maxWidth","isTruncated","Link","href","aria-label","icon","ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","top","right","variant","position","onClick","App","theme","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.0aa8bea2.chunk.js","sourcesContent":["const makeCommonConstant = (type: string) => ({\n  BEGIN: type.concat('_BEGIN'),\n  SUCCESS: type.concat('_SUCCESS'),\n  FAILURE: type.concat('_FAILURE'),\n})\n\nexport const AUTHENTICATION = makeCommonConstant('AUTHENTICATION')\n","import { combineReducers } from 'redux'\n\nexport const rootReducer = combineReducers({\n  common: combineReducers({}),\n})\n\nexport default rootReducer\n","import thunk from 'redux-thunk'\nimport { createStore, applyMiddleware } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension/logOnlyInProduction'\nimport rootReducer from './reducers'\n\nexport * as Targets from './constants'\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)))\nexport default store\n","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { FaExternalLinkAlt, FaGithub, FaUserAstronaut } from 'react-icons/fa'\nimport {\n  Box,\n  Text,\n  Menu,\n  Flex,\n  Input,\n  Stack,\n  Button,\n  Spacer,\n  Center,\n  Avatar,\n  Heading,\n  Spinner,\n  MenuList,\n  Skeleton,\n  Container,\n  InputGroup,\n  MenuButton,\n  IconButton,\n  MenuDivider,\n  FormControl,\n  MenuItemOption,\n  FormHelperText,\n  SkeletonCircle,\n  MenuOptionGroup,\n  InputLeftElement,\n  InputRightElement,\n  Link,\n} from '@chakra-ui/react'\nimport axios from 'axios'\n\nconst Home: React.FC<{}> = () => {\n  const [data, setData] = React.useState([])\n  const [username, setUsername] = React.useState<string>('')\n  const [sortBy, setSortBy] = React.useState<string>('created')\n  const [orderBy, setOrderBy] = React.useState<string>('asc')\n\n  const [typingTimeout, setTypingTimeout] = React.useState<number | NodeJS.Timeout>(0)\n  const [isLoading, setIsLoading] = React.useState(false)\n\n  const inputElem = React.useRef(null)\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const {\n      target: { value },\n    } = event\n\n    if (typingTimeout) {\n      clearTimeout(typingTimeout as NodeJS.Timeout)\n    }\n\n    setUsername(value)\n\n    if (!!value) {\n      setTypingTimeout(\n        setTimeout(() => {\n          setIsLoading(true)\n          axios\n            .get(`https://api.github.com/users/${value}/repos`, {\n              params: {\n                sort: sortBy,\n                direction: orderBy,\n              },\n            })\n            .then(({ data }) => {\n              setData(data)\n              setIsLoading(false)\n            })\n            .catch(err => {\n              console.error('err: ', err)\n              throw err\n            })\n        }, 1000)\n      )\n    }\n  }\n\n  return (\n    <Container maxW=\"container.md\" py=\"20\">\n      <Stack spacing={8}>\n        <Flex>\n          <Center>\n            <FaGithub size=\"5rem\" />\n          </Center>\n          <Box px={3}>\n            <Heading as=\"h1\" size=\"lg\">\n              Github User's Repos Finder\n            </Heading>\n            <Text fontSize=\"xl\" textColor=\"gray.500\">\n              Elit id consequat aliquip cillum exercitation culpa ea nostrud in et est amet\n              voluptate.\n            </Text>\n          </Box>\n        </Flex>\n        <Flex>\n          <Box w=\"80%\">\n            <FormControl id=\"username\">\n              <InputGroup>\n                <InputLeftElement children={<FaUserAstronaut />} />\n                <Input\n                  ref={inputElem}\n                  value={username}\n                  onChange={handleChange}\n                  placeholder=\"Type github username here...\"\n                />\n                {isLoading && <InputRightElement children={<Spinner />} />}\n              </InputGroup>\n              <FormHelperText>Example: thisisdhika, facebook, microsoft, etc..</FormHelperText>\n            </FormControl>\n          </Box>\n          <Spacer />\n          <Menu closeOnSelect={false}>\n            <MenuButton as={Button} colorScheme=\"blue\">\n              Filter Option\n            </MenuButton>\n            <MenuList minW={60}>\n              <MenuOptionGroup\n                type=\"radio\"\n                value={sortBy}\n                title=\"Sort By\"\n                onChange={value => setSortBy(value as string)}>\n                <MenuItemOption value=\"created\">Created</MenuItemOption>\n                <MenuItemOption value=\"updated\">Updated</MenuItemOption>\n                <MenuItemOption value=\"pushed\">Pushed</MenuItemOption>\n                <MenuItemOption value=\"full_name\">Full Name</MenuItemOption>\n              </MenuOptionGroup>\n              <MenuDivider />\n              <MenuOptionGroup\n                type=\"radio\"\n                title=\"Order\"\n                value={orderBy}\n                onChange={value => setOrderBy(value as string)}>\n                <MenuItemOption value=\"asc\">Ascending</MenuItemOption>\n                <MenuItemOption value=\"desc\">Descending</MenuItemOption>\n              </MenuOptionGroup>\n            </MenuList>\n          </Menu>\n        </Flex>\n        <Stack>\n          {isLoading && !!username\n            ? Array(6)\n                .fill('')\n                .map((_, key) => (\n                  <Box key={key} borderWidth=\"1px\" borderRadius=\"lg\">\n                    <Flex p=\"4\" alignItems=\"center\">\n                      <Center>\n                        <SkeletonCircle size=\"64px\" />\n                      </Center>\n                      <Box px=\"4\">\n                        <Skeleton height=\"16px\" width=\"8rem\" />\n                        <Skeleton mt={2} height=\"14px\" width=\"18rem\" />\n                      </Box>\n                      <Center ml=\"auto\">\n                        <Skeleton mt={2} height=\"40px\" width=\"40px\" borderRadius=\"0.375rem\" />\n                      </Center>\n                    </Flex>\n                  </Box>\n                ))\n            : data.length > 0 &&\n              data.map(({ owner, name, full_name, description, svn_url }, key) => (\n                <Box key={key} borderWidth=\"1px\" borderRadius=\"lg\">\n                  <Flex p=\"4\" alignItems=\"center\">\n                    <Center>\n                      <Avatar size=\"lg\" name={username} src={(owner as any).avatar_url} />\n                    </Center>\n                    <Box px=\"4\">\n                      <Box fontWeight=\"bold\" as=\"h1\" lineHeight=\"tight\">\n                        {name}{' '}\n                        <Box as=\"span\" fontWeight=\"light\" color=\"gray.600\" fontSize=\"sm\">\n                          {full_name}\n                        </Box>\n                      </Box>\n                      <Box maxWidth=\"30rem\" as=\"p\" isTruncated>\n                        {description}\n                      </Box>\n                    </Box>\n                    <Center ml=\"auto\">\n                      <IconButton\n                        as={Link}\n                        href={svn_url}\n                        aria-label=\"Call Segun\"\n                        icon={<FaExternalLinkAlt />}\n                      />\n                    </Center>\n                  </Flex>\n                </Box>\n              ))}\n        </Stack>\n      </Stack>\n    </Container>\n  )\n}\n\nexport default connect()(Home)\n","import * as React from 'react'\nimport { FaMoon, FaSun } from 'react-icons/fa'\nimport { useColorMode, useColorModeValue, IconButton, IconButtonProps } from '@chakra-ui/react'\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, 'aria-label'>\n\nconst ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = props => {\n  const { toggleColorMode } = useColorMode()\n  const text = useColorModeValue('dark', 'light')\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\n\n  return (\n    <IconButton\n      top=\"2\"\n      size=\"md\"\n      right=\"2\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      position=\"fixed\"\n      icon={<SwitchIcon />}\n      onClick={toggleColorMode}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  )\n}\n\nexport default ColorModeSwitcher\n","import * as React from 'react'\nimport { ChakraProvider, theme } from '@chakra-ui/react'\nimport { Provider } from 'react-redux'\nimport store from './store'\nimport { Home } from './pages'\nimport { ColorModeSwitcher } from './components'\n\nexport const App: React.FC<{}> = () => (\n  <Provider store={store}>\n    <ChakraProvider theme={theme}>\n      <ColorModeSwitcher />\n      <Home />\n    </ChakraProvider>\n  </Provider>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react'\nimport * as React from 'react'\nimport ReactDOM from 'react-dom'\nimport { App } from './App'\n// import reportWebVitals from './reportWebVitals'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals()\n"],"sourceRoot":""}